#!/usr/bin/env python3

import os
import base64
import zipfile

archive = b"""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"""

# installing
def install():
    # dir for installing
    install_dir = '/usr/share/'

    # access check
    if not os.access('/usr/local/bin', os.W_OK) or not os.access(install_dir, os.W_OK):
        print('[\033[91mERROR\033[0m] Permission denied')
        return False

    # install check
    if os.access(install_dir + '/Sanelotto', os.F_OK):
        print('[\033[91mERROR\033[0m] Sanelotto already installed')
        return False

    # creating main dir
    try:
        os.mkdir(install_dir + '/Sanelotto')
        print('[\033[92mOK\033[0m] Directory created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create /usr/share/Sanelotto')
        return False

    # unpacking
    try:
        # creating
        temp_archive = open(install_dir + '/Sanelotto/temp_sl.zip', 'wb')
        temp_archive.write(base64.decodebytes(archive))
        temp_archive.close()
        # extracting
        temp_archive_obj = zipfile.ZipFile(install_dir + '/Sanelotto/temp_sl.zip', 'r')
        temp_archive_obj.extractall(install_dir + '/Sanelotto')
        # deleting temp archive
        os.remove(install_dir + '/Sanelotto/temp_sl.zip')
        print('[\033[92mOK\033[0m] Sanelotto extracted')
    except:
        print('[\033[91mERROR\033[0m] Failed to unpack Sanelotto')
        return False

    # creating link
    try:
        os.symlink(install_dir + '/Sanelotto/sanelotto', '/usr/local/bin/sanelotto')
        os.chmod('/usr/local/bin/sanelotto', 0o777)
        print('[\033[92mOK\033[0m] Link created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create symlink')
        return False

    print('[\033[92mDONE\033[0m] Sanelotto successfully installed')

# start
install()