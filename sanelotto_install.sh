#!/usr/bin/env python3

import os
import base64
import zipfile

archive = b"""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"""

# installing
def install():
    # dir for installing
    install_dir = '/usr/share/'

    # access check
    if not os.access('/usr/local/bin', os.W_OK) or not os.access(install_dir, os.W_OK):
        print('[\033[91mERROR\033[0m] Permission denied')
        return False

    # install check
    if os.access(install_dir + '/Sanelotto', os.F_OK):
        print('[\033[91mERROR\033[0m] Sanelotto already installed')
        return False

    # creating main dir
    try:
        os.mkdir(install_dir + '/Sanelotto')
        print('[\033[92mOK\033[0m] Directory created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create /usr/share/Sanelotto')
        return False

    # unpacking
    try:
        # creating
        temp_archive = open(install_dir + '/Sanelotto/temp_sl.zip', 'wb')
        temp_archive.write(base64.decodebytes(archive))
        temp_archive.close()
        # extracting
        temp_archive_obj = zipfile.ZipFile(install_dir + '/Sanelotto/temp_sl.zip', 'r')
        temp_archive_obj.extractall(install_dir + '/Sanelotto')
        # deleting temp archive
        os.remove(install_dir + '/Sanelotto/temp_sl.zip')
        print('[\033[92mOK\033[0m] Sanelotto extracted')
    except:
        print('[\033[91mERROR\033[0m] Failed to unpack Sanelotto')
        return False

    # creating link
    try:
        os.symlink(install_dir + '/Sanelotto/sanelotto', '/usr/local/bin/sanelotto')
        os.chmod('/usr/local/bin/sanelotto', 0o777)
        print('[\033[92mOK\033[0m] Link created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create symlink')
        return False

    print('[\033[92mDONE\033[0m] Sanelotto successfully installed')

# start
install()