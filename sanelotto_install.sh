#!/usr/bin/env python3

import os
import base64
import zipfile

archive = b"""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
BQAAtyAAAAAA"""

# installing
def install():
    # dir for installing
    install_dir = '/usr/share/'

    # access check
    if not os.access('/usr/local/bin', os.W_OK) or not os.access(install_dir, os.W_OK):
        print('[\033[91mERROR\033[0m] Permission denied')
        return False

    # install check
    if os.access(install_dir + '/Sanelotto', os.F_OK):
        print('[\033[91mERROR\033[0m] Sanelotto already installed')
        return False

    # creating main dir
    try:
        os.mkdir(install_dir + '/Sanelotto')
        print('[\033[92mOK\033[0m] Directory created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create /usr/share/Sanelotto')
        return False

    # unpacking
    try:
        # creating
        temp_archive = open(install_dir + '/Sanelotto/temp_sl.zip', 'wb')
        temp_archive.write(base64.decodebytes(archive))
        temp_archive.close()
        # extracting
        temp_archive_obj = zipfile.ZipFile(install_dir + '/Sanelotto/temp_sl.zip', 'r')
        temp_archive_obj.extractall(install_dir + '/Sanelotto')
        # deleting temp archive
        os.remove(install_dir + '/Sanelotto/temp_sl.zip')
        print('[\033[92mOK\033[0m] Sanelotto extracted')
    except:
        print('[\033[91mERROR\033[0m] Failed to unpack Sanelotto')
        return False

    # creating link
    try:
        os.symlink(install_dir + '/Sanelotto/sanelotto', '/usr/local/bin/sanelotto')
        os.chmod('/usr/local/bin/sanelotto', 0o777)
        print('[\033[92mOK\033[0m] Link created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create symlink')
        return False

    print('[\033[92mDONE\033[0m] Sanelotto successfully installed')

# start
install()