#!/usr/bin/env python3

import os
import base64
import zipfile

archive = b"""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
UEsFBgAAAAARABEAwQUAAIsgAAAAAA=="""

# installing
def install():
    # dir for installing
    install_dir = '/usr/share/'

    # access check
    if not os.access('/usr/local/bin', os.W_OK) or not os.access(install_dir, os.W_OK):
        print('[\033[91mERROR\033[0m] Permission denied')
        return False

    # install check
    if os.access(install_dir + '/Sanelotto', os.F_OK):
        print('[\033[91mERROR\033[0m] Sanelotto already installed')
        return False

    # creating main dir
    try:
        os.mkdir(install_dir + '/Sanelotto')
        print('[\033[92mOK\033[0m] Directory created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create /usr/share/Sanelotto')
        return False

    # unpacking
    try:
        # creating
        temp_archive = open(install_dir + '/Sanelotto/temp_sl.zip', 'wb')
        temp_archive.write(base64.decodebytes(archive))
        temp_archive.close()
        # extracting
        temp_archive_obj = zipfile.ZipFile(install_dir + '/Sanelotto/temp_sl.zip', 'r')
        temp_archive_obj.extractall(install_dir + '/Sanelotto')
        # deleting temp archive
        os.remove(install_dir + '/Sanelotto/temp_sl.zip')
        print('[\033[92mOK\033[0m] Sanelotto extracted')
    except:
        print('[\033[91mERROR\033[0m] Failed to unpack Sanelotto')
        return False

    # creating link
    try:
        os.symlink(install_dir + '/Sanelotto/sanelotto', '/usr/local/bin/sanelotto')
        os.chmod('/usr/local/bin/sanelotto', 0o777)
        print('[\033[92mOK\033[0m] Link created')
    except:
        print('[\033[91mERROR\033[0m] Failed to create symlink')
        return False

    print('[\033[92mDONE\033[0m] Sanelotto successfully installed')

# start
install()